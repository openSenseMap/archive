use OSeM-api
db.users.aggregate([ { $project: { _id: 0, name: 1, id: { $toString: "$_id" }, email: 1, role: 1, email_is_confirmed: "$emailIsConfirmed", created_at: "$createdAt", updated_at: "$updatedAt" } }, { $out: "user" } ])
db.users.aggregate([ { $unwind: { path: "$boxes", includeArrayIndex: "string", preserveNullAndEmptyArrays: false } }, { $project: { _id: 0, name: 1, id: { $toString: "$_id" }, deviceId: { $toString: "$boxes" }, email: 1, role: 1, email_is_confirmed: "$emailIsConfirmed", created_at: "$createdAt", updated_at: "$updatedAt" } }, { $out: "user_boxes" } ])
db.users.aggregate([ { $project: { user_id: { $toString: "$_id" }, hash: "$hashedPassword" } }, { $out: { db: "OSeM-api", coll: "password" } } ])
db.users.aggregate([ { $project: { id: { $toString: "$_id" }, username: "$name", user_id: { $toString: "$_id" } } }, { $out: { db: "OSeM-api", coll: "profile" } } ])
db.boxes.aggregate([ { $project: { name: 1, model: 1, exposure: 1, description: "", id: { $toString: "$_id" }, latitude: { $arrayElemAt: [ "$currentLocation.coordinates", 1 ] }, longitude: { $arrayElemAt: [ "$currentLocation.coordinates", 0 ] }, use_auth: "$useAuth", created_at: "$createdAt", updated_at: "$updatedAt" } }, { $lookup: { from: "user_boxes", localField: "id", foreignField: "deviceId", pipeline: [ { $project: { _id: 0, user_id: "$id" } } ], as: "tmp_user" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: ["$tmp_user", 0] }, "$$ROOT" ] } } }, { $match: { user_id: { $ne: null } } }, { $out: "device" } ])
db.boxes.aggregate([ { $unwind: { path: "$sensors", includeArrayIndex: "sensor", preserveNullAndEmptyArrays: false } }, { $project: { _id: 0, id: { $toString: "$sensors._id" }, title: "$sensors.title", sensor_type: "$sensors.sensorType", unit: "$sensors.unit", device_id: { $toString: "$_id" } } }, { $match: { id: { $ne: null } } }, { $out: "sensor" } ])
db.sensor.aggregate([ { $match: { id: { $ne: null } } }, { $group: { _id: "$id", device_id: { $first: "$device_id" }, count: { $sum: 1 } } }, { $match: { _id: { $ne: null }, count: { $gt: 1 } } } ]).forEach(function(doc){ db.sensor.deleteMany({id: doc._id}) })
db.measurements.aggregate([ { '$project': { '_id': 0, 'sensor_id': { '$toString': '$sensor_id' }, 'value': 1, 'time': '$createdAt', 'latitude': { '$arrayElemAt': [ '$location.coordinates', 1 ] }, 'longitude': { '$arrayElemAt': [ '$location.coordinates', 0 ] } } }, { '$out': 'measurement' } ])